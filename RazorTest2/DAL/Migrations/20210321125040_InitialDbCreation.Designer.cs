// <auto-generated />
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210321125040_InitialDbCreation")]
    partial class InitialDbCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("Domain.TodoTask", b =>
                {
                    b.Property<int>("TodoTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDone")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TodoTaskCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TodoTaskName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<int>("TodoTaskPriorityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TodoTaskId");

                    b.HasIndex("IsDone");

                    b.HasIndex("TodoTaskCategoryId");

                    b.HasIndex("TodoTaskName");

                    b.HasIndex("TodoTaskPriorityId");

                    b.ToTable("TodoTasks");
                });

            modelBuilder.Entity("Domain.TodoTaskCategory", b =>
                {
                    b.Property<int>("TodoTaskCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TodoTaskCategoryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TodoTaskCategoryId");

                    b.ToTable("TodoTaskCategories");
                });

            modelBuilder.Entity("Domain.TodoTaskPriority", b =>
                {
                    b.Property<int>("TodoTaskPriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sort")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TodoTaskPriorityName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TodoTaskPriorityId");

                    b.ToTable("TodoTaskPriorities");
                });

            modelBuilder.Entity("Domain.TodoTask", b =>
                {
                    b.HasOne("Domain.TodoTaskCategory", "TodoTaskCategory")
                        .WithMany("TodoTasks")
                        .HasForeignKey("TodoTaskCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.TodoTaskPriority", "TodoTaskPriority")
                        .WithMany("Todotasks")
                        .HasForeignKey("TodoTaskPriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TodoTaskCategory");

                    b.Navigation("TodoTaskPriority");
                });

            modelBuilder.Entity("Domain.TodoTaskCategory", b =>
                {
                    b.Navigation("TodoTasks");
                });

            modelBuilder.Entity("Domain.TodoTaskPriority", b =>
                {
                    b.Navigation("Todotasks");
                });
#pragma warning restore 612, 618
        }
    }
}
